hist(unif_num,nbins = 10)
hist(unif_num,breaks = 10)
hist(unif_num,breaks = 10)
chisq.test(unif_num)
?qhisq.test
?chisq.test
?runs.test
?runs.test
??runs.test
runs.test(x, alternative = c("two.sided", "less", "greater"))
install.packages('tseries')
library(tseries)
?runs.test
runs.test(x, alternative = 'two-sided')
runs.test(unif_num, alternative = 'two-sided')
runs.test(factor(unif_num), alternative = 'two-sided')
runs.test(as.factor(unif_num), alternative = 'two-sided')
runs.test(as.factor(unif_num))
chisq.test(unif_num)
unif_num_system <- sample(0:M-1,10000)
unif_num_system <- sample(0:M-1,10000,replace = T)
set.seed(1)
unif_num_system <- sample(0:M-1,10000,replace = T)
hist(unif_num_system,breaks = 10)
chisq.test(unif_num_system)
runs.test(as.factor(unif_num_system))
0:M-1
set.seed(1)
unif_num_system <- sample(0:(M-1),10000,replace = T)
hist(unif_num_system,breaks = 10)
chisq.test(unif_num_system)
runs.test(as.factor(unif_num_system))
hist(unif_num_system,breaks = 10)
?runs.test
runs.test(as.dfactor(unif_num_system))
runs.test(dfactor(unif_num_system))
as.vector(unif_num)
as.logical(unif_num)
as.logical(as.vector.factor(unif_num))
as.logical(as.vector.factor(unif_num))
as.logical(as.vector(unif_num))
round(unif_num)
runs.test(round(unif_num))
runs.test(as.factor(round(unif_num)))
runs.test(as.factor(round(unif_num_system)))
unif_num_system <- sample(0:(M-1),10000,replace = T)/M
runs.test(as.factor(round(unif_num_system)))
runs.test(as.factor(round(unif_num_system)),alternative = 'greater')
runs.test(as.factor(round(unif_num_system)),alternative = 'two-sided')
runs.test(as.factor(round(unif_num_system)),alternative = 'two.sided')
chisq.test(unif_num_system)
a <- 5
c <- 1
M <- 16
x0 <- 3
unif_num <- NULL
random_num <- NULL
random_num[1] <- x0
unif_num[1] <- x0/M
for(i in 2:10000){
random_num[i] <- (a*random_num[i-1] + c) %% M
unif_num[i] <- random_num[i]/M
}
hist(unif_num,breaks = 10)
chisq.test(unif_num)
runs.test(as.factor(round(unif_num)))
plot(unif_num_system[-1],)
unif_num_system[-1]
bla <- unif_num_system[-1]
plot(unif_num_system[-n],unif_num_system[-1],)
library(tseries)
a <- 5
c <- 1
M <- 16
x0 <- 3
n <- 10000
unif_num <- NULL
random_num <- NULL
random_num[1] <- x0
unif_num[1] <- x0/M
for(i in 2:n){
random_num[i] <- (a*random_num[i-1] + c) %% M
unif_num[i] <- random_num[i]/M
}
hist(unif_num,breaks = 10)
chisq.test(unif_num)
runs.test(as.factor(round(unif_num)))
set.seed(1)
unif_num_system <- sample(0:(M-1),10000,replace = T)/M
runs.test(as.factor(round(unif_num_system)),alternative = 'two.sided')
chisq.test(unif_num_system)
hist(unif_num_system,breaks = 10)
plot(unif_num_system[-n],unif_num_system[-1])
?chisq.test
slices <- c(15,25,15,25,5,10,5)
lbls <- c("Irriterende", "Kedelig", "Snakker om EB", "Ædru", "Sjov og fuld", 'Træt', 'Til Team K\'s sommercup')
pie(slices, labels = lbls, main="Pie Chart of Countries")
slices <- c(15,25,15,25,5,10,5)
lbls <- c("Irriterende", "Kedelig", "Snakker om EB", "Ædru", "Sjov og fuld", 'Træt', 'Til Team K\'s sommercup')
pie(slices, labels = lbls, main="Jens\' liv")
?pie
pie(slices, labels = lbls, main="Jens\' liv",col = rainbow)
?pie
pie(slices, labels = lbls, main="Jens\' liv",col = rainbow(7))
slices <- c(15,25,15,25,5,10,5)
lbls <- c("Irriterende", "Kedelig", "Snakker om EB", "Ædru", "Sjov og fuld", 'Træt', 'Til Team K\'s sommercup')
?pie
pnorm(2)
?pnorm
1-pnorm(2)
1-dnorm(2)
dnorm(2)
1-pnorm(2)
pnorm(34, mean = 40, sd = 9)
qnorm(2)
dnorm(2)
dnorm(2)/2
dnorm(2, log = F)
dnorm(2, log = F)/2
?pbinom
pbinom(9,10,0.8)
dbinom(9,10,0.8)
choose(10,9)*0.8^9*0.2
dbinom(9,10,0.8)
?qchisq
pchisq(6.2, df = 2)
1- pchisq(6.2, df = 2)
x <- c(-1,0,1,2,3,4,5,6,7,8)
y <- c(1.4,4.7,5.1,8.3,9.0,14.5,14.0,13.4,19.2,18)
lm(y~x)
x <- c(13, 5, 28, 28, 15, 4, 13, 4, 10, 17, 11, 13, 12, 17, 3)
lm(y~x)
x <- c(-1,0,1,2,3,4,5,6,7,8)
y <- c(1.4,4.7,5.1,8.3,9.0,14.5,14.0,13.4,19.2,18)
lm(y~x)
mod <- lm(y~x)
plot(x,y)
mod$fitted.values
lines(x, mod$fitted.values, col = 'red')
abline(mod, col = 'blue', lwd = 3)
?optim
y <- 3 + rnorm(10, sd = 2)
y
nll <- function(theta, y){
-sum(dnorm(y, mean = theta[1], sd = sqrt(theta[2]), log = T))
}
cat('Install and load packages...')
to_only_install <- c()
to_install_and_load <- c(
'data.table',  # data.table objects
'stringr',     # str_c
'tidyr',       # gather
'lubridate',   # months(), %+m% | should be loaded after data.table
'RPostgreSQL', #
'plyr',        # laply
'dplyr',        # %>%, rename, transmute # should be loaded after plyr
'ggplot2',
'sp',
'tidyverse',
'xtable',
'Rsolnp',
'nlme',
'nlme', # Mixed effects linear models
'lme4' # package for generalized mixed effects linear models
)
to_install <- c(to_only_install, to_install_and_load)
installed  <- rownames(installed.packages())
for(p in to_install) if(! p %in% installed) install.packages(p, depend=TRUE)
for(p in to_install_and_load) require(p, character.only=TRUE)
cat(' Packages loaded.',fill = T)
nlminb(c(0,1), nll, y = y)
?dnbinom
fun <- function(theta){
-sum(dnorm(x1, mean = theta[1], sd = sqrt(theta[2]), log = T))
}
fit <- optim(par = c(0, 1), fn = fun)
theta <- c(0,1)
fit <- optim(par = theta , fn = fun(theta))
x1 <- c(13, 5, 28, 28, 15, 4, 13, 4, 10, 17, 11, 13, 12, 17, 3)
fun <- function(theta){
-sum(dnorm(x1, mean = theta[1], sd = sqrt(theta[2]), log = T))
}
theta <- c(0,1)
fit <- optim(par = theta , fn = fun(theta))
fit <- optim(par = theta , fn = fun
?optim
# Jans bøsse noter --------------------------------------
y <- 3 + rnorm(10, sd = 2)
nll <- function(theta, y){
-sum(dnorm(y, mean = theta[1], sd = sqrt(theta[2]), log = T))
}
nlminb(c(0,1), nll, y = y)
fit <- optim(par = theta , fn = fun)
fit
fit$par
x1 <- c(13, 5, 28, 28, 15, 4, 13, 4, 10, 17, 11, 13, 12, 17, 3)
fun <- function(theta){
-sum(dnbinom(x1, mean = theta[1], sd = sqrt(theta[2]), log = T))
}
theta <- c(0,1)
fit <- optim(par = theta , fn = fun)
x1 <- c(13, 5, 28, 28, 15, 4, 13, 4, 10, 17, 11, 13, 12, 17, 3)
fun <- function(theta){
-sum(dnbinom(x1, log = T))
}
theta <- c(0,1)
fit <- optim(par = theta , fn = fun)
x1 <- c(13, 5, 28, 28, 15, 4, 13, 4, 10, 17, 11, 13, 12, 17, 3)
fun <- function(theta){
-sum(dnbinom(x1, 10,   log = T))
}
theta <- c(0,1)
fit <- optim(par = theta , fn = fun)
rm(list = ls())
# setwd("C:/Users/kshll/Dropbox/AK DTU/Advanced data analysis")
cat('Install and load packages...')
to_only_install <- c()
to_install_and_load <- c(
'data.table',  # data.table objects
'stringr',     # str_c
'tidyr',       # gather
'lubridate',   # months(), %+m% | should be loaded after data.table
'RPostgreSQL', #
'plyr',        # laply
'dplyr',        # %>%, rename, transmute # should be loaded after plyr
'ggplot2',
'sp',
'tidyverse',
'xtable',
'Rsolnp',
'nlme',
'nlme', # Mixed effects linear models
'lme4', # package for generalized mixed effects linear models
'car',
'latex2exp',
'psych',
'corrplot'
)
to_install <- c(to_only_install, to_install_and_load)
installed  <- rownames(installed.packages())
for(p in to_install) if(! p %in% installed) install.packages(p, depend=TRUE)
for(p in to_install_and_load) require(p, character.only=TRUE)
cat(' Packages loaded.',fill = T)
setwd('C:/Users/kshll/Dropbox/AK DTU/Social data analysis/Assignment_2/project-folder/Babba')
data <- read.csv('data.csv')
View(data)
str(data)
data <- read.csv('data.csv', stringsAsFactors = F)
data %>% group_by(Date) %>% summarize(sum(Date))
?summarize
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1)
data %>% group_by(Date) %>% summarize(sum(counts))
data %>% group_by(Date) %>% summarize(sum(counts)) %>% ungroup %>% data.table -> counts
counts
data2 <- merge(data, counts, by = Date)
data2 <- merge(data, counts, by = 'Date')
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
data2
exportJson <- toJSON(data2)
library("rjson")
setcolorder(data2) <- c(2,1)
data2 <- setcolorder(c(2,1))
?setcolorder
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
install.packages('rjson')
library("rjson")
write(exportJson, "test.json")
exportJson <- toJSON(data2)
write(exportJson, "test.json")
rm(list = ls())
# setwd("C:/Users/kshll/Dropbox/AK DTU/Advanced data analysis")
cat('Install and load packages...')
to_only_install <- c()
to_install_and_load <- c(
'data.table',  # data.table objects
'stringr',     # str_c
'tidyr',       # gather
'lubridate',   # months(), %+m% | should be loaded after data.table
'RPostgreSQL', #
'plyr',        # laply
'dplyr',        # %>%, rename, transmute # should be loaded after plyr
'ggplot2',
'sp',
'tidyverse',
'xtable',
'Rsolnp',
'nlme',
'nlme', # Mixed effects linear models
'lme4', # package for generalized mixed effects linear models
'car',
'latex2exp',
'psych',
'corrplot'
)
to_install <- c(to_only_install, to_install_and_load)
installed  <- rownames(installed.packages())
for(p in to_install) if(! p %in% installed) install.packages(p, depend=TRUE)
for(p in to_install_and_load) require(p, character.only=TRUE)
cat(' Packages loaded.',fill = T)
setwd('C:/Users/kshll/Dropbox/AK DTU/Social data analysis/Assignment_2/project-folder/Babba')
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1)
data %>% group_by(Date) %>% summarize(sum(counts)) %>% ungroup %>% data.table -> counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2
data2[!duplicated(data2)]
?duplicated
data2[,!duplicated(data2)]
!duplicated(data2)
data2 <- !duplicated(data2)
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2 <- unigue(data2)
data2 <- unique(data2)
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2 <- unique(data2)
data2 <- unique(data2) %>% mutate(Date = as.Date(Date))
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2
?as.Date
data2 <- unique(data2) %>% mutate(Date = as.Date(Date, format = '%d/%m/%Y'))
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%d/%m/%Y'))
data
data <- read.csv('data.csv', stringsAsFactors = F)
View(data)
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum(counts)) %>% ungroup %>% data.table -> counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2 <- unique(data2)
data2
View(data2)
?tseries
??tseries
??ts
?ts
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum(counts)) %>% ungroup %>% data.table -> counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2 <- unique(data2)
exportJson <- toJSON(data2)
write(exportJson, "test.json")
ts(data = data2$Date, start = '2006/01/01', end = '2016/12/31')
data2
seq(as.Date(2006-01-01), as.Date(2016-12-31))
seq(as.Date('2006-01-01'), as.Date('2016-12-31'))
seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = day)
seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total_dates <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total <- rep(0, 4018)
total
total <- rep(0, 4018) %>% data.table()
total
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total
merge(data2, total)
a <- merge(data2, total)
a <- merge(data2, total, All.y = TRUE)
total$keep = FALSE
total$Date %in% data2$Date
Total$keep <- total$Date %in% data2$Date
total$keep <- total$Date %in% data2$Date
total
View(data2)
total <- total %>% filter(keep == FALSE) %>% transmute(Date, sum(counts) = .)
total <- total %>% filter(keep == FALSE) %>% transmute(Date, ´sum(counts)´ = .)
total <- total %>% filter(keep == FALSE) %>% mutate(Date, ´sum(counts)´ = .)
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum = sum(counts)) %>% ungroup %>% data.table -> counts
data
data %>% group_by(Date) %>% summarize(sum1 = sum(counts)) %>% ungroup %>% data.table -> counts
counts
data %>% group_by(Date) %>% summarize(sum_counts = sum(counts)) %>% ungroup %>% data.table -> counts
counts
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum_counts = sum(counts)) %>% ungroup %>% data.table -> counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts) %>%
setcolorder(data2, c(2,1))
data2 <- unique(data2)
total <- total %>% filter(keep == FALSE) %>% mutate(Date, sum_counts = .)
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total
total <- data.table(total) %>% filter(keep == FALSE) %>% mutate(Date, sum_counts = .)
total <- data.table(total) %>% filter(keep == FALSE)
total
?rename
total <- data.table(total) %>% filter(keep == FALSE) %>% mutate(sum_counts = .) %>%  select(-keep)
total <- data.table(total) %>% filter(keep == FALSE) %>% mutate(sum_counts = '.') %>%  select(-keep)
total
total$sum_counts <- total$.
total
total <- data.table(total) %>% filter(keep == FALSE) %>% select(-keep)
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total$sum_counts <- total$.
total <- data.table(total) %>% filter(keep == FALSE) %>% select(-keep)
total
data3 <- rbind(data2, total)
total
total <- data.table(total) %>% filter(keep == FALSE) %>% select(-.)
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total$sum_counts <- total$.
total$. <- NULL
total <- data.table(total) %>% filter(keep == FALSE)
data3 <- rbind(data2, total)
data3 <- cbind(data2, total)
data2
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum_counts = sum(counts)) %>% ungroup %>% data.table -> counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts) %>%
setcolorder(data2, c(2,1))
data2 <- unique(data2)
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total$sum_counts <- total$.
total$. <- NULL
total <- data.table(total) %>% filter(keep == FALSE)
total
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total$sum_counts <- total$.
total$. <- NULL
total <- data.table(total) %>% filter(keep == FALSE) %>% select(-keep)
total
data2
setcolorder(total, c(2,1))
data3 <- rbind(data2, total)
total
data2
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum_counts = sum(counts)) %>% ungroup %>% data.table -> counts
data
counts
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts) %>%
setcolorder(data2, c(2,1))
data2 <- unique(data2)
data2
data <- read.csv('data.csv', stringsAsFactors = F)
data <- data.table(data) %>% mutate(counts = 1, Date = as.Date(Date, format = '%m/%d/%Y'))
data %>% group_by(Date) %>% summarize(sum_counts = sum(counts)) %>% ungroup %>% data.table -> counts
counts
data2 <- merge(data, counts, by = 'Date')
data2
data2 <- merge(data, counts, by = 'Date') %>% select(-Index, -Name, -Time, -Latitude, -Longitude, -counts)
setcolorder(data2, c(2,1))
data2
data2 <- unique(data2)
total <- rep(0, 4018) %>% data.table()
total$Date <- seq(as.Date('2006-01-01'), as.Date('2016-12-31'), by = 'day')
total$keep <- total$Date %in% data2$Date
total$sum_counts <- total$.
total$. <- NULL
total <- data.table(total) %>% filter(keep == FALSE) %>% select(-keep)
setcolorder(total, c(2,1))
data3 <- rbind(data2, total)
data3
View(data3)
exportJson <- toJSON(data3)
write(exportJson, "test.json")
data3 <- rbind(data2, total) %>% data.table() %>% mutate(Date = as.character(Date))
data3 <- rbind(data2, total) %>% data.table()%>% order(Date) %>% mutate(Date = as.character(Date))
data3 <- rbind(data2, total) %>% data.table()
data3
data3 <- rbind(data2, total) %>% data.table() %>% order(Date)
data3 <- rbind(data2, total) %>% data.table() %>% order('Date')
data3 <- rbind(data2, total) %>% data.table() %>% sort(Date) %>% mutate(Date = as.character(Date))
?order
data3 <- rbind(data2, total) %>% data.table() %>% setorder(Date) %>% mutate(Date = as.character(Date))
data3
View(data3)
?toJSON
as.list(data3)
data4 <- as.list(data3)
exportJson <- toJSON(data4)
write(exportJson, "test.json")
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
# Parse it back
fromJSON(jsoncars)
jsoncars <- toJSON(mtcars, pretty=TRUE)
library(jsonlite)
toJSON(data3, dataframe = 'rows')
exportJson <- toJSON(data3, dataframe = 'rows')
write(exportJson, "test.json")
